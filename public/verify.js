const API_BASE = '/api';

let html5QrcodeScanner = null;
let isScannerActive = false;
let isLibraryLoaded = false;

class TicketVerifier {
    constructor() {
        this.initManualInput();
        this.loadScannerLibrary();
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
    loadScannerLibrary() {
        if (typeof Html5Qrcode !== 'undefined') {
            isLibraryLoaded = true;
            console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            this.updateScannerButton();
            return;
        }

        const script = document.createElement('script');
        script.src = '/lib/html5-qrcode.min.js';
        script.onload = () => {
            isLibraryLoaded = true;
            console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏');
            this.updateScannerButton();
        };
        script.onerror = () => {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏');
            this.showScannerError('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ /lib/html5-qrcode.min.js');
        };
        document.head.appendChild(script);
    }

    updateScannerButton() {
        const startButton = document.getElementById('startScanner');
        if (startButton) {
            startButton.disabled = false;
            startButton.innerHTML = 'üì∑ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–æ–≤';
            startButton.style.background = '#3498db';
        }
    }

    showScannerError(message) {
        const startButton = document.getElementById('startScanner');
        if (startButton) {
            startButton.disabled = true;
            startButton.innerHTML = '‚ùå –°–∫–∞–Ω–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            startButton.style.background = '#95a5a6';
        }
        
        const errorElement = document.getElementById('cameraError');
        if (errorElement) {
            errorElement.style.display = 'block';
            errorElement.innerHTML = message;
        }
    }

    initManualInput() {
        const input = document.getElementById('manualTicketInput');
        if (input) {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.checkManualTicket();
                }
            });
        }
    }

    // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ QR-–∫–æ–¥–æ–≤
    // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ QR-–∫–æ–¥–æ–≤
async startQRScanner() {
    if (!isLibraryLoaded || typeof Html5Qrcode === 'undefined') {
        this.showScannerError('–°–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–æ–≤ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
        return;
    }

    const scannerElement = document.getElementById('reader');
    const startButton = document.getElementById('startScanner');
    const stopButton = document.getElementById('stopScanner');
    const errorElement = document.getElementById('cameraError');

    if (!scannerElement) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å–∫–∞–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∫–∞–Ω–µ—Ä
    if (html5QrcodeScanner && isScannerActive) {
        await this.stopQRScanner();
        await new Promise(resolve => setTimeout(resolve, 300));
    }

    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–∞–Ω–µ—Ä–∞
    scannerElement.innerHTML = '';
    scannerElement.style.position = 'relative';
    scannerElement.style.overflow = 'hidden';

    if (errorElement) errorElement.style.display = 'none';

    try {
        // –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        html5QrcodeScanner = new Html5Qrcode("reader");
        
        // –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        const config = {
            fps: 10,
            qrbox: { width: 250, height: 250 },
            aspectRatio: 1.0,
            disableFlip: false
        };

        console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É...');

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–∏–¥–µ–æ
        await html5QrcodeScanner.start(
            { facingMode: "environment" },
            config,
            (decodedText) => {
                console.log('‚úÖ QR-–∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:', decodedText);
                this.onQRCodeScanned(decodedText);
            },
            (error) => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                if (!error.message?.includes('No QR code found')) {
                    console.log('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
                }
            }
        );

        // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
        console.log('‚úÖ –°–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω, –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ
        setTimeout(() => {
            this.checkVideoDisplay();
        }, 1000);

        if (startButton) startButton.style.display = 'none';
        if (stopButton) stopButton.style.display = 'block';
        isScannerActive = true;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞:', error);
        this.handleScannerError(error);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ
checkVideoDisplay() {
    const scannerElement = document.getElementById('reader');
    if (!scannerElement) return;

    // –ò—â–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Å–∫–∞–Ω–µ—Ä–∞
    const videoElement = scannerElement.querySelector('video');
    const canvasElement = scannerElement.querySelector('canvas');
    
    console.log('üé• –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
    console.log('–í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç:', videoElement);
    console.log('Canvas —ç–ª–µ–º–µ–Ω—Ç:', canvasElement);
    
    if (videoElement) {
        console.log('üìπ –í–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä—ã:', videoElement.videoWidth, 'x', videoElement.videoHeight);
        console.log('üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:', videoElement.readyState);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–µ–æ
        videoElement.style.width = '100%';
        videoElement.style.height = '100%';
        videoElement.style.objectFit = 'cover';
        videoElement.style.borderRadius = '10px';
    }
    
    if (canvasElement) {
        canvasElement.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º canvas –µ—Å–ª–∏ –º–µ—à–∞–µ—Ç
    }
    
    // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if (!videoElement) {
        console.warn('‚ö†Ô∏è –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å–∫–∞–Ω–µ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
        this.showScannerStatus('–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ (–≤–∏–¥–µ–æ –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è)');
    } else {
        this.showScannerStatus('–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –Ω–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ QR-–∫–æ–¥');
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
showScannerStatus(message) {
    const scannerElement = document.getElementById('reader');
    if (!scannerElement) return;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    const existingStatus = document.getElementById('scannerStatus');
    if (existingStatus) {
        existingStatus.remove();
    }

    const statusElement = document.createElement('div');
    statusElement.id = 'scannerStatus';
    statusElement.style.cssText = `
        position: absolute;
        top: 10px;
        left: 10px;
        right: 10px;
        background: rgba(46, 204, 113, 0.9);
        color: white;
        padding: 8px 12px;
        border-radius: 20px;
        text-align: center;
        font-weight: bold;
        font-size: 14px;
        z-index: 1000;
        box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    `;
    statusElement.innerHTML = `üéØ ${message}`;
    
    scannerElement.appendChild(statusElement);
}

    onQRCodeScanned(decodedText) {
    console.log('üì∑ QR-–∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:', decodedText);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –∏–∑ QR-–∫–æ–¥–∞
    const ticketId = this.extractTicketIdFromQR(decodedText);
    
    if (ticketId) {
        console.log('üé´ –ò–∑–≤–ª–µ—á–µ–Ω –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞:', ticketId);
        setTimeout(() => {
            this.stopQRScanner();
            this.verifyTicket(ticketId);
        }, 100);
    } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –∏–∑ QR-–∫–æ–¥–∞');
        this.showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞');
    }
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR-–∫–æ–¥–∞
extractTicketIdFromQR(qrContent) {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º QR-–∫–æ–¥:', qrContent);
    
    // –ï—Å–ª–∏ —ç—Ç–æ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ticket
    if (qrContent.includes('ticket=')) {
        const urlParams = new URLSearchParams(new URL(qrContent).search);
        const ticketId = urlParams.get('ticket');
        if (ticketId) {
            return ticketId;
        }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å B –∏ —Ü–∏—Ñ—Ä—ã)
    if (qrContent.match(/^B\d+$/)) {
        return qrContent;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ URL –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞
    const ticketMatch = qrContent.match(/B\d+/);
    if (ticketMatch) {
        return ticketMatch[0];
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞
    try {
        const jsonData = JSON.parse(qrContent);
        if (jsonData.ticket || jsonData.id) {
            return jsonData.ticket || jsonData.id;
        }
    } catch (e) {
        // –ù–µ JSON, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –ª—é–±–æ–π –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –±–∏–ª–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    const possibleTicket = qrContent.split('/').pop().split('?').pop().split('=').pop();
    if (possibleTicket && possibleTicket.match(/^[A-Za-z0-9]+$/)) {
        console.log('üé´ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞:', possibleTicket);
        return possibleTicket;
    }
    
    return null;
}

    handleScannerError(error) {
        const scannerElement = document.getElementById('reader');
        const errorElement = document.getElementById('cameraError');
        
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É';
        
        if (error.name === 'AbortError' || error.message.includes('AbortError')) {
            console.log('–°–∫–∞–Ω–µ—Ä –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
            return;
        } else if (error.message && error.message.includes('Permission')) {
            errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
        } else if (error.message && error.message.includes('NotFound')) {
            errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞.';
        } else if (error.message && error.message.includes('NotSupported')) {
            errorMessage = '–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.';
        } else if (error.message && error.message.includes('NotAllowedError')) {
            errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
        }
        
        if (scannerElement) {
            scannerElement.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: center; height: 100%; color: #666;">
                    <div style="text-align: center;">
                        <div style="font-size: 3rem;">‚ùå</div>
                        <p>${errorMessage}</p>
                        <button onclick="startQRScanner()" style="background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 5px; margin-top: 10px; cursor: pointer;">
                            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                </div>
            `;
        }
        
        if (errorElement) {
            errorElement.style.display = 'block';
            errorElement.innerHTML = `‚ùå ${errorMessage}`;
        }
        
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞:', error);
        
        this.resetScannerUI();
        isScannerActive = false;
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
    async stopQRScanner() {
        if (html5QrcodeScanner && isScannerActive) {
            try {
                await html5QrcodeScanner.stop();
                console.log('‚èπÔ∏è –°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            } catch (err) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å AbortError
                if (err.name !== 'AbortError' && !err.message.includes('AbortError')) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞:', err);
                } else {
                    console.log('–°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (AbortError –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞)');
                }
            }
        }
        
        this.resetScannerUI();
        isScannerActive = false;
    }

    resetScannerUI() {
        const startButton = document.getElementById('startScanner');
        const stopButton = document.getElementById('stopScanner');
        const scannerElement = document.getElementById('reader');
        
        if (startButton) startButton.style.display = 'block';
        if (stopButton) stopButton.style.display = 'none';
        if (scannerElement) {
            scannerElement.innerHTML = `
                <button id="startScanner" onclick="startQRScanner()" style="margin-top: 1rem;">
                    üì∑ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–æ–≤
                </button>
                <button id="stopScanner" onclick="stopQRScanner()" style="display: none; background: #e74c3c; margin-top: 1rem;">
                    ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä
                </button>
            `;
        }
    }

    async verifyTicket(ticketId) {
    try {
        if (!ticketId) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞');
            return;
        }

        const cleanTicketId = ticketId.trim().replace(/[^A-Za-z0-9]/g, '');
        
        if (!cleanTicketId) {
            this.showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–∞');
            return;
        }

        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∏–ª–µ—Ç–∞:', cleanTicketId);
        this.clearResults();

        this.showLoading('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–∞...');

        const response = await fetch(`${API_BASE}/ticket/${cleanTicketId}`);
        
        console.log('üìä –û—Ç–≤–µ—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', {
            status: response.status,
            ok: response.ok,
            url: response.url
        });

        if (!response.ok) {
            if (response.status === 404) {
                this.showError(`–ë–∏–ª–µ—Ç "${cleanTicketId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            } else if (response.status === 400) {
                this.showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–∞');
            } else {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return;
        }
        
        const result = await response.json();
        console.log('üìã –î–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–∞:', result);

        if (result.valid) {
            console.log('‚úÖ –ë–∏–ª–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å:', result.ticket?.status);
            this.showTicketInfo(result.ticket);
        } else {
            console.log('‚ùå –ë–∏–ª–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', result.message);
            this.showError(result.message || '–ë–∏–ª–µ—Ç –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–∞:', error);
        this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–∞: ' + error.message);
    }
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
showLoading(message) {
    const infoElement = document.getElementById('ticketInfo');
    if (!infoElement) return;

    infoElement.innerHTML = `
        <div style="text-align: center; padding: 2rem;">
            <div style="font-size: 2rem;">‚è≥</div>
            <p>${message}</p>
        </div>
    `;
    infoElement.className = 'ticket-info';
    infoElement.style.display = 'block';
}

    showTicketInfo(ticket) {
    const infoElement = document.getElementById('ticketInfo');
    if (!infoElement) return;

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    const status = ticket.status || 'active';
    const isUsed = status === 'used';
    
    const buttonHTML = isUsed 
        ? '<button disabled style="background: #95a5a6; width: 100%;">‚úÖ –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</button>'
        : `<button onclick="markAsUsed('${ticket.id}')" style="background: #27ae60; width: 100%;">‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π</button>`;

    infoElement.innerHTML = `
        <div style="color: #27ae60; font-weight: bold; margin-bottom: 1rem;">‚úÖ –ë–∏–ª–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</div>
        <div><strong>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</strong> ${ticket.event || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
        <div><strong>–î–∞—Ç–∞:</strong> ${ticket.eventDate ? new Date(ticket.eventDate).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
        <div><strong>–ì–æ—Å—Ç—å:</strong> ${ticket.customer || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
        <div><strong>–ú–µ—Å—Ç–∞:</strong> ${ticket.seats || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</div>
        <div><strong>–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞:</strong> ${ticket.id || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
        <div><strong>–°—Ç–∞—Ç—É—Å:</strong> ${status}</div>
        <div style="margin-top: 1rem;">
            ${buttonHTML}
        </div>
    `;
    infoElement.className = 'ticket-info valid';
    infoElement.style.display = 'block';
    
    console.log('üé´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å:', status);
}

    showError(message) {
        const infoElement = document.getElementById('ticketInfo');
        if (!infoElement) return;

        infoElement.innerHTML = `
            <div style="color: #e74c3c; font-weight: bold; margin-bottom: 0.5rem;">‚ùå ${message}</div>
            <button onclick="clearResults()" style="background: #3498db; width: 100%; margin-top: 0.5rem;">
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
        `;
        infoElement.className = 'ticket-info invalid';
        infoElement.style.display = 'block';
    }

    checkManualTicket() {
        const ticketId = document.getElementById('manualTicketInput').value.trim();
        if (ticketId) {
            this.verifyTicket(ticketId);
        } else {
            this.showError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞');
        }
    }

    clearResults() {
        const infoElement = document.getElementById('ticketInfo');
        const inputElement = document.getElementById('manualTicketInput');
        
        if (infoElement) {
            infoElement.style.display = 'none';
            infoElement.innerHTML = '';
        }
        if (inputElement) {
            inputElement.value = '';
            inputElement.focus();
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function startQRScanner() {
    if (window.ticketVerifier) {
        window.ticketVerifier.startQRScanner();
    }
}

function stopQRScanner() {
    if (window.ticketVerifier) {
        window.ticketVerifier.stopQRScanner();
    }
}

function checkManualTicket() {
    if (window.ticketVerifier) {
        window.ticketVerifier.checkManualTicket();
    }
}

async function markAsUsed(ticketId) {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –±–∏–ª–µ—Ç–∞:', ticketId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ticketId –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        const originalTicketId = ticketId;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const infoElement = document.getElementById('ticketInfo');
        if (infoElement) {
            const button = infoElement.querySelector('button');
            if (button) {
                button.disabled = true;
                button.innerHTML = '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
                button.style.background = '#f39c12';
            }
        }

        // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ—Ç–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞:', `${API_BASE}/ticket/${ticketId}/use`);
        
        const response = await fetch(`${API_BASE}/ticket/${ticketId}/use`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });

        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok,
            headers: Object.fromEntries(response.headers.entries())
        });

        const result = await response.json();
        console.log('üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', result);

        if (response.ok) {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–º–µ—Ç–∫—É –±–∏–ª–µ—Ç–∞');
            
            // 2. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
            if (result.ticket && result.ticket.status === 'used') {
                console.log('üé´ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –±–∏–ª–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "used"');
                updateTicketStatusInUI(ticketId, 'used', result.ticket);
            } else {
                console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
                updateTicketStatusInUI(ticketId, 'used');
            }
            
            // 3. –î–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            console.log('üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
            setTimeout(async () => {
                console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –±–∏–ª–µ—Ç–∞:', originalTicketId);
                try {
                    const checkResponse = await fetch(`${API_BASE}/ticket/${originalTicketId}`);
                    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', {
                        status: checkResponse.status,
                        ok: checkResponse.ok
                    });
                    
                    if (checkResponse.ok) {
                        const checkResult = await checkResponse.json();
                        console.log('üìã –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkResult);
                        
                        if (checkResult.ticket && checkResult.ticket.status === 'used') {
                            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞: –±–∏–ª–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω');
                            updateTicketStatusInUI(originalTicketId, 'used', checkResult.ticket);
                        } else {
                            console.warn('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞: –±–∏–ª–µ—Ç –≤—Å–µ –µ—â–µ active', checkResult);
                            alert('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ë–∏–ª–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.');
                        }
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞');
                    }
                } catch (checkError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError);
                }
            }, 2000);

        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –±–∏–ª–µ—Ç–∞');
            throw new Error(result.error || result.message || `HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const infoElement = document.getElementById('ticketInfo');
        if (infoElement) {
            const button = infoElement.querySelector('button');
            if (button) {
                button.disabled = false;
                button.innerHTML = '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π';
                button.style.background = '#27ae60';
            }
        }
        
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
function updateTicketStatusInUI(ticketId, newStatus, ticketData = null) {
    const infoElement = document.getElementById('ticketInfo');
    if (!infoElement) {
        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ticketInfo –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    console.log('üé® –û–±–Ω–æ–≤–ª—è–µ–º UI, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', newStatus);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    const button = infoElement.querySelector('button');
    if (button) {
        if (newStatus === 'used') {
            button.disabled = true;
            button.innerHTML = '‚úÖ –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω';
            button.style.background = '#95a5a6';
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    const allDivs = infoElement.querySelectorAll('div');
    let statusUpdated = false;
    
    allDivs.forEach(div => {
        if (div.innerHTML.includes('–°—Ç–∞—Ç—É—Å:') || div.innerHTML.includes('Status:')) {
            div.innerHTML = `<strong>–°—Ç–∞—Ç—É—Å:</strong> ${newStatus}`;
            statusUpdated = true;
            console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    if (ticketData) {
        console.log('üé´ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        if (window.ticketVerifier) {
            window.ticketVerifier.showTicketInfo(ticketData);
        }
    }
    
    if (!statusUpdated) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
}

function clearResults() {
    if (window.ticketVerifier) {
        window.ticketVerifier.clearResults();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.ticketVerifier = new TicketVerifier();
    
    const inputElement = document.getElementById('manualTicketInput');
    if (inputElement) {
        inputElement.focus();
    }
    
    const startButton = document.getElementById('startScanner');
    if (startButton) {
        startButton.disabled = true;
        startButton.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...';
    }
});

window.addEventListener('beforeunload', () => {
    if (window.ticketVerifier) {
        window.ticketVerifier.stopQRScanner();
    }
});